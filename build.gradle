import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
	repositories {
		gradlePluginPortal()
		jcenter()
		mavenLocal()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
		classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$usedDetektGradleVersion"
	}
}

plugins {
	id 'com.jfrog.bintray' version '1.8.0'
	id 'com.github.ben-manes.versions' version '0.17.0'
	id 'com.github.johnrengelman.shadow' version '2.0.2' apply false
	id 'org.sonarqube' version '2.6.2'
	id 'com.gradle.plugin-publish' version '0.9.10' apply false
}

tasks.withType(Wrapper) {
	gradleVersion = '4.6'
	distributionType = Wrapper.DistributionType.ALL
}

allprojects {
	group = 'io.gitlab.arturbosch.detekt'
	version = detektVersion

	repositories {
		jcenter()
		mavenLocal()
		maven { url 'http://dl.bintray.com/jetbrains/spek' }
	}
}

String USER_HOME = System.getProperty('user.home')

subprojects { project ->
	apply plugin: 'org.junit.platform.gradle.plugin'
	apply plugin: 'java-library'
	apply plugin: 'kotlin'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'io.gitlab.arturbosch.detekt'

	detekt {
		debug = true
		parallel = true
		toolVersion = usedDetektGradleVersion

		configFile = file("${rootProject.projectDir}/detekt-cli/src/main/resources/default-detekt-config.yml")
		baseline = file("${rootProject.projectDir}/reports/baseline.xml")
		filters = '.*/resources/.*, .*/build/.*'

		idea {
			path = "$USER_HOME/.idea"
			codeStyleScheme = "$USER_HOME/.idea/idea-code-style.xml"
			inspectionsProfile = "$USER_HOME/.idea/inspect.xml"
			report = "project.projectDir/reports"
			mask = "*.kt,"
		}
	}

	tasks.withType(io.gitlab.arturbosch.detekt.Detekt) {
		reports {
			xml {
				enabled true
				destination file("build/reports/detekt.xml")

			}
			html {
				enabled true
				destination file("build/reports/detekt.html")
			}
		}
	}

	task detektFailfast(type: io.gitlab.arturbosch.detekt.Detekt) {
		description = "Runs a failfast detekt build."

		source = sourceSets.getAt("main").allSource
		configFile = file("${rootProject.projectDir}/reports/failfast.yml")
	}

	if (project.name in ['detekt-cli', 'detekt-watch-service', 'detekt-generator']) {
		apply plugin: 'application'
		apply plugin: 'com.github.johnrengelman.shadow'
	}

	tasks.withType(KotlinCompile) {
		kotlinOptions.jvmTarget = "1.8"
		kotlinOptions.freeCompilerArgs = ["-Xskip-runtime-version-check"]
		kotlinOptions.allWarningsAsErrors = shouldTreatCompilerWarningsAsErrors()
	}

	junitPlatform {
		details 'tree'
		filters {
			engines {
				include 'spek', 'junit-jupiter'
			}
		}
	}

	bintray {
		user = System.getenv('BINTRAY_USER') ?: ''
		key = System.getenv('BINTRAY_API_KEY') ?: ''
		publications = ['DetektPublication']

		pkg {
			repo = 'code-analysis'
			name = 'detekt'
			userOrg = 'arturbosch'
			licenses = ['Apache-2.0']
			vcsUrl = 'https://github.com/arturbosch/detekt'

			version {
				name = project.version
				released = new Date()
			}
		}
	}

	final sourcesJar = tasks.create('sourcesJar', Jar) {
		dependsOn('classes')
		classifier = 'sources'
		from(sourceSets.main.allSource)
	}

	artifacts {
		archives(sourcesJar)
	}

	final pomConfig = {
		licenses {
			license {
				name 'The Apache Software License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				distribution 'repo'
			}
		}
		developers {
			developer {
				id 'Artur Bosch'
				name 'Artur Bosch'
				email 'arturbosch@gmx.de'
			}
		}

		scm {
			url 'https://github.com/arturbosch/detekt'
		}
	}

	publishing {
		publications {
			DetektPublication(MavenPublication) {
				from components.java
				artifact sourcesJar
				groupId project.group
				artifactId project.name
				version project.version
				pom.withXml {
					def root = asNode()
					root.appendNode('description', 'Static code analysis for Kotlin')
					root.appendNode('name', 'detekt')
					root.appendNode('url', 'https://github.com/arturbosch/detekt')
					root.children().last() + pomConfig
				}
			}
		}
	}

	configurations {
		kotlinImplementation
		kotlinTest
		junitPlatform
	}

	dependencies {
		kotlinImplementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
		kotlinImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
		kotlinTest "org.junit.jupiter:junit-jupiter-api:$junitEngineVersion"
		kotlinTest "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
		kotlinTest "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
		kotlinTest "org.assertj:assertj-core:$assertjVersion"
		kotlinTest "org.jetbrains.spek:spek-api:$spekVersion"
		kotlinTest "org.jetbrains.spek:spek-subject-extension:$spekVersion"
		kotlinTest "org.junit.jupiter:junit-jupiter-engine:$junitEngineVersion"
		kotlinTest 'org.reflections:reflections:0.9.11'
		junitPlatform "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
		junitPlatform "org.junit.platform:junit-platform-console:$junitPlatformVersion"
		junitPlatform "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
	}
}

/**
 * Usage: <code>./gradlew build -PwarningsAsErrors=true</code>.
 */
boolean shouldTreatCompilerWarningsAsErrors() {
	return project.findProperty('warningsAsErrors') == 'true'
}
